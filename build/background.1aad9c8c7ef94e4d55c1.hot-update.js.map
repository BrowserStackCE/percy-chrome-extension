{"version":3,"file":"background.1aad9c8c7ef94e4d55c1.hot-update.js","mappings":";;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxPA","sources":["webpack://chrome-extension-boilerplate-react/./src/pages/Background/index.js","webpack://chrome-extension-boilerplate-react/webpack/runtime/getFullHash"],"sourcesContent":["//listener for percy snapshots\nvar automated_capture;\n\n// Function to inject the dialog box into the page\nfunction injectDialogBox(tabId) {\n  chrome.scripting.executeScript({\n    target: { tabId: tabId },\n    func: () => {\n      const dialogBox = document.createElement('div');\n      dialogBox.setAttribute(\n        'style',\n        `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        background-color: #fff;\n        padding: 10px;\n        z-index: 9999;\n        border-bottom: 1px solid #ccc;\n      `\n      );\n\n      // Add your dialog box content here\n      dialogBox.innerHTML = `\n        <p>Hello, this is a dialog box!</p>\n        <button id=\"closeDialog\">Close</button>\n      `;\n\n      document.body.prepend(dialogBox);\n\n      // Add event listener to the close button\n      const closeButton = document.getElementById('closeDialog');\n      closeButton.addEventListener('click', () => {\n        dialogBox.style.display = 'none';\n      });\n    },\n  });\n}\n\nchrome.runtime.onMessage.addListener(function (message, sender, sendResponse) {\n  console.log('Message received in the background script:', message.action);\n  if (message.action === 'snapshot') {\n    percySnapshot(message.name);\n  }\n\n  if (message.action === 'toggle_capture') {\n    automated_capture = message.state;\n  }\n  // Process the message or send a response if needed\n});\n//storage key\n\n// Session storage initialize\nlet storage_snapshot_key = 'percy_snapshots';\nchrome.tabs.onActivated.addListener(onTabActivated);\n// //add filter feature in future\nchrome.webNavigation.onCompleted.addListener(onPageLoadComplete, {\n  urls: ['<all_urls>'],\n});\n\n// Handle tab switch event\nfunction onTabActivated(activeInfo) {\n  const tabId = activeInfo.tabId;\n  checkPageLoadComplete(tabId);\n}\n\n// Handle the completion of page loading\nfunction onPageLoadComplete(details) {\n  const tabId = details.tabId;\n  checkPageLoadComplete(tabId);\n}\n\n// Listen to button clicks and navigation events using the chrome.tabs API\nchrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {\n  if (changeInfo.status === 'loading' && changeInfo.url) {\n    // Navigation to a different URL\n    checkPageLoadComplete(tabId);\n  }\n});\n\n// Check if the page has completely loaded\nfunction checkPageLoadComplete(tabId) {\n  // Check if the tab exists\n  chrome.tabs.get(tabId, (tab) => {\n    if (chrome.runtime.lastError || !tab) {\n      // Tab doesn't exist or there was an error\n      return;\n    }\n\n    // Check if all frames have finished loading\n    if (tab.status === 'complete' && !tab.pendingUrl && automated_capture) {\n      console.log('Page loaded completely:', tab.url);\n      chrome.runtime.onMessage.addListener((message) => {\n        if (message.action === 'elementClicked') {\n          console.log(message.element);\n        }\n      });\n      injectDialogBox(tabId);\n      percySnapshot();\n      // Perform any actions you want after the page is completely loaded\n      // ...\n    }\n  });\n}\n\n//tab switch\n//button clicks\n//navigation to a different url\n// chrome.webNavigation.onCompleted.addListener(onPageLoadComplete, {\n//   urls: ['<all_urls>'],\n// });\n// chrome.tabs.onActivated.addListener(onPageLoadComplete);\n// chrome.webNavigation.onBeforeNavigate.addListener(onPageLoadComplete, {\n//   urls: ['<all_urls>'],\n// });\n\n// // Handle the completion of page loading\n// function onPageLoadComplete(details) {\n//   console.log(\"sssss\")\n//   const tabId = details.tabId;\n\n//   // Check if the tab exists\n//   chrome.tabs.get(tabId, (tab) => {\n//     if (chrome.runtime.lastError || !tab) {\n//       // Tab doesn't exist or there was an error\n//       return;\n//     }\n\n//     // Check if all frames have finished loading\n//     if (tab.status === 'complete' && !tab.pendingUrl) {\n//       console.log('Page loaded completely:', tab.url);\n//       percySnapshot();\n//       // Perform any actions you want after the page is completely loaded\n//       // ...\n//     }\n//   });\n// }\n\n// //add filter feature in future\n// // const filter = {\n// //   url: [\n// //     {\n// //       urlMatches: 'https://www.google.com/',\n// //     },\n// //   ],\n// // };\n// chrome.webNavigation.onDOMContentLoaded.addListener(() => {\n//   console.info('The user has loaded my favorite website!');\n// });\n// window.addEventListener('load', function () {\n//   // Use Intersection Observer API to detect when new elements become visible\n//   const observer = new IntersectionObserver(function (entries, observer) {\n//     entries.forEach(function (entry) {\n//       // Check if the element is visible\n//       if (entry.isIntersecting) {\n//         // Perform any necessary actions, such as capturing a snapshot with Percy\n//         console.log('Element is visible:', entry.target);\n//       }\n//     });\n//   });\n\n//   // Observe the entire document for new elements\n//   observer.observe(document.documentElement);\n// });\n\n// CANT be used manifest v3\n// async function fetchPercyDom() {\n//   const response = await fetch('http://localhost:5338/percy/dom.js');\n//   if (!response.ok) {\n//     throw new Error(\n//       `Failed to fetch Percy DOM script: ${response.status} ${response.statusText}`\n//     );\n//   }\n//   return await response.text();\n// }\n\nasync function percySnapshot(snapshotName) {\n  console.log('in percy snapshot background script');\n  const [tab] = await chrome.tabs.query({\n    active: true,\n    currentWindow: true,\n  });\n  await chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    files: ['dom.js'],\n  });\n\n  const results = await chrome.scripting.executeScript({\n    target: { tabId: tab.id },\n    files: ['serialize.js'],\n  });\n\n  const ss = await chrome.tabs.captureVisibleTab(null, { quality: 20 });\n\n  if (results.length == 0) {\n    throw new Error(`Failed to serialize the DOM`);\n  }\n\n  // return results[0];\n  console.log(results);\n  const data = {\n    domSnapshot: results[0].result,\n    url: tab.url,\n    name: snapshotName == null ? tab.title : snapshotName,\n    // clientInfo: JSON.stringify({ environment: 'development' }),\n    // widths: [1280],\n    // enableJavaScript: false,\n  };\n  // nSTORE SNAPSHOTS TO SHARED LOCAL STORAGE\n  chrome.storage.local.get('snapshots', function (result) {\n    var value = result.snapshots;\n    console.log('Value retrieved from localStorage:', value);\n    //if value is not undefined\n    if (value != undefined) {\n      console.log(value);\n      value[data.name] = { percyData: data, screenshot: ss };\n      console.log(value);\n      chrome.storage.local.set({ snapshots: value }, function () {\n        console.log('Value is set in localStorage.');\n      });\n    } else {\n      chrome.storage.local.set(\n        { snapshots: { [data.name]: { percyData: data, screenshot: ss } } },\n        function () {\n          console.log('Value is set in localStorage.');\n        }\n      );\n    }\n  });\n\n  // fetch('http://localhost:5338/percy/snapshot', {\n  //   method: 'POST',\n  //   headers: {\n  //     'Content-Type': 'application/json',\n  //   },\n  //   body: JSON.stringify(data),\n  // })\n  //   .then((response) => {\n  //     console.log(response);\n  //     return true;\n  //   })\n  //   .catch((error) => {\n  //     console.error(error);\n  //     return false;\n  //   });\n}\n\n// Add event listeners for various events\n","__webpack_require__.h = () => (\"825f52d37d2fd21f810a\")"],"names":[],"sourceRoot":""}